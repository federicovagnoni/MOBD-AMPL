reset;
model project.mod;
data project.dat;

option randseed 304707912456;	# optimal seed value setup
#sedbono 304707591634 

param lb_f;
param ub_f;


# lower and upper bound defined for G3
let lb_f := 0;
let ub_f := 20;

# file names
param file_log symbolic;
param file_w symbolic;
param file_v symbolic;
param file_tr symbolic;
param file_val symbolic;
param file_test symbolic;
param file_output symbolic;


# Read and scale
include readandscale.run;


# Start training
let err_tr := 1.e30;
let err_val := 1.e30;
let err_test := 1.e30;
let file_log:=("NN_log.txt");


repeat while (stop_tr == 0){
	
	let loc_err_tr := 1.e30;
	let loc_err_val := 1.e30;
	let loc_err_test := 1.e30;

	printf "------------------------------------------------------\n" > (file_log);	
	printf "training of the nn with %d neurons in the hidden layer\n", nl > (file_log);	
	printf "------------------------------------------------------\n" > (file_log);	
	
	#multistart for nl neurons in the hidden layer
	for {k in 1..nmax} {
		let{i in 1..nl} v[i] := Uniform(rangeinf,rangesup);
		let{z in 1..n, j in 1..nl} win[z,j] := Uniform(rangeinf,rangesup);		
		
		option solver knitro;
		option knitro_options "opttol = 0.001";
		option solver_msg 0;
		solve;
		printf "errore sul training set: %f\n", error_tr >> (file_log);
		printf "errore sul validation set: %f\n", error_val >> (file_log);
		printf "errore sul test set: %f\n", error_test >> (file_log);
		
		#saving best error on the validation set for nl neurons
		if (error_val <= loc_err_val) then { 
			printf "error on validation improved: old %f new %f\n", loc_err_val, error_val;
			let loc_err_val := error_val;
			let loc_err_tr := error_tr;
			let loc_err_test := error_test;


			#saving the corresponding parameters in two files
			let file_w:=("NNwin" & "_" & nl & "_" & k & ".txt");
			let file_v:=("NNwin" & "_" & nl & "_" & k & ".txt");

			for {i in 1..n, j in 1..nl}
						printf "%f\n",win[i,j] >(file_w) ;
			for {i in 1..nl}
						printf "%f\n",v[i] >(file_v);

			let best_k_loc := k;						
		}
	} 

	#check for a global improvement on the validation set
	if (loc_err_val < err_val) then {
	#updating the best error and increasing the number of neurons
		printf "the best error on the validation set is %f with %d neurons \n",
			loc_err_val,nl;
		let best_nl := nl; 
		let best_k := best_k_loc;
		let nl := nl+1;
		let err_val := loc_err_val;
		let err_tr := loc_err_tr;
		let err_test:=loc_err_test;

	}
	else 
	#stop
		let stop_tr := 1;
}#while

printf "final error on the test set is %f\n",err_test >> (file_log);
update data nl, win,v;
let nl := best_nl;
let file_w := ("NNwin" & "_" & best_nl & "_" & best_k & ".txt");
let file_v := ("NNv" & "_" & best_nl & "_" & best_k & "..txt");
display best_nl;
display err_tr;
display err_val;
display err_test;