# ----------------------------------
# Lettura e scaling del training set
# ----------------------------------
read ptr < (trainingFile);
for {p in 1..ptr}{
	for {k in 1..n-1}{
		read xtr[k,p] < (trainingFile);
	}
	read ytr[p] < (trainingFile);
}

# Age values inversion
let{p in 1..ptr} xtr[1,p] := ubx[1] + lbx[1] - xtr[1,p];

# Scale of Age
let{p in 1..ptr} xtr[1,p] := (xtr[1,p] - lbx[1]) / (ubx[1] - lbx[1]);

# Traveltime values inversion
let{p in 1..ptr} xtr[5,p] := ubx[5] + lbx[5] - xtr[5,p];

# Failures values inversion
let{p in 1..ptr} xtr[7,p] := ubx[7] + lbx[7] - xtr[7,p];

# Scale of Medu, Fedu, traveltime, studytime, failures
for {i in 3..7} {
	let{p in 1..ptr} xtr[i,p] := (xtr[i,p] - lbx[i]) / (ubx[i] - lbx[i]);
}

# Inversion of freetime, goout, Dalc and Walc values
for {i in 17..20} {
	let{p in 1..ptr} xtr[i,p] := ubx[i] + lbx[i] - xtr[i,p];
}

# Absences values inverison
let{p in 1..ptr} xtr[22,p] := ubx[22] + lbx[22] - xtr[22,p];

# Scale of famrel, freetime, goout, Dalc, Walc, health, absences, G1 and G2
for {i in 16..24} {
	let{p in 1..ptr} xtr[i,p] := (xtr[i,p] - lbx[i]) / (ubx[i] - lbx[i]);
}

# Scale G3
let{p in 1..ptr} ytr[p] := (ytr[p] - lb_f) / (ub_f - lb_f);



# ------------------------------------
# Lettura e scaling del validation set
# ------------------------------------
read pval < (validationFile);
for {p in 1..pval}{
	for {k in 1..n-1}{
		read xval[k,p] < (validationFile);
	}
	read yval[p] < (validationFile);
}


# Age values inversion
let{p in 1..pval} xval[1,p] := ubx[1] + lbx[1] - xval[1,p];

# Scale of Age
let{p in 1..pval} xval[1,p] := (xval[1,p] - lbx[1]) / (ubx[1] - lbx[1]);

# Traveltime values inversion
let{p in 1..pval} xval[5,p] := ubx[5] + lbx[5] - xval[5,p];

# Failures values inversion
let{p in 1..pval} xval[7,p] := ubx[7] + lbx[7] - xval[7,p];

# Scale of Medu, Fedu, traveltime, studytime, failures
for {i in 3..7} {
	let{p in 1..pval} xval[i,p] := (xval[i,p] - lbx[i]) / (ubx[i] - lbx[i]);
}

# Inversion of freetime, goout, Dalc and Walc values
for {i in 17..20} {
	let{p in 1..pval} xval[i,p] := ubx[i] + lbx[i] - xval[i,p];
}

# Absences values inverison
let{p in 1..pval} xval[22,p] := ubx[22] + lbx[22] - xval[22,p];

# Scale of famrel, freetime, goout, Dalc, Walc, health, absences, G1 and G2
for {i in 16..24} {
	let{p in 1..pval} xval[i,p] := (xval[i,p] - lbx[i]) / (ubx[i] - lbx[i]);
}

# Scale G3
let{p in 1..pval} yval[p] := (yval[p] - lb_f) / (ub_f - lb_f);


# ------------------------------
# Lettura e scaling del test set
# ------------------------------
read ptest < (testFile);
for {p in 1..ptest}{
	for {k in 1..n-1}{
		read xtest[k,p] < (testFile);
	}
	read ytest[p] < (testFile);
}


# Age values inversion
let{p in 1..ptest} xtest[1,p] := ubx[1] + lbx[1] - xtest[1,p];

# Scale of Age
let{p in 1..ptest} xtest[1,p] := (xtest[1,p] - lbx[1]) / (ubx[1] - lbx[1]);

# Traveltime values inversion
let{p in 1..ptest} xtest[5,p] := ubx[5] + lbx[5] - xtest[5,p];

# Failures values inversion
let{p in 1..ptest} xtest[7,p] := ubx[7] + lbx[7] - xtest[7,p];

# Scale of Medu, Fedu, traveltime, studytime, failures
for {i in 3..7} {
	let{p in 1..ptest} xtest[i,p] := (xtest[i,p] - lbx[i]) / (ubx[i] - lbx[i]);
}

# Inversion of freetime, goout, Dalc and Walc values
for {i in 17..20} {
	let{p in 1..ptest} xtest[i,p] := ubx[i] + lbx[i] - xtest[i,p];
}

# Absences values inverison
let{p in 1..ptest} xtest[22,p] := ubx[22] + lbx[22] - xtest[22,p];

# Scale of famrel, freetime, goout, Dalc, Walc, health, absences, G1 and G2
for {i in 16..24} {
	let{p in 1..ptest} xtest[i,p] := (xtest[i,p] - lbx[i]) / (ubx[i] - lbx[i]);
}

# Scale G3
let{p in 1..ptest} ytest[p] := (ytest[p] - lb_f) / (ub_f - lb_f);